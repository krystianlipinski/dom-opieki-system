// To mówi Prismie, jakiego klienta ma wygenerować.
generator client {
  provider = "prisma-client-js"
}

// To mówi Prismie, jak połączyć się z bazą danych.
// Czyta zmienną DATABASE_URL z pliku .env.
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// === DEFINICJE NASZYCH MODELI (TABEL) ===

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  firstName String? // Znak ? oznacza, że pole jest opcjonalne
  lastName  String?
  role      Role     @default(staff_care)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  // Relacje
  createdFamilyAccess PatientFamilyAccess[]
  tasksCompleted      Task[]
  inventoryMovements  InventoryMovement[]
}

model Patient {
  id           Int      @id @default(autoincrement())
  firstName    String
  lastName     String
  birthDate    DateTime?
  carePriority Priority @default(medium)
  createdAt    DateTime @default(now())

  // Relacje
  familyAccess PatientFamilyAccess[]
  tasks        Task[]
}

model PatientFamilyAccess {
  patientId Int
  userId    Int

  patient Patient @relation(fields: [patientId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@id([patientId, userId]) // Klucz główny złożony
}

model CatalogActivity {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  defaultCost Decimal @default(0)

  // Relacje
  tasks Task[]
}

model CatalogProduct {
  id      Int     @id @default(autoincrement())
  name    String  @unique
  barcode String? @unique
  unit    String // np. 'szt', 'ml', 'op.'

  // Relacje
  inventory          Inventory?
  inventoryMovements InventoryMovement[]
}

model Inventory {
  id                  Int @id @default(autoincrement())
  quantity            Int @default(0)
  lowStockThreshold   Int @default(0)
  
  // Relacje
  product   CatalogProduct @relation(fields: [productId], references: [id])
  productId Int            @unique
}

model InventoryMovement {
  id              Int               @id @default(autoincrement())
  quantityChange  Int
  costPerUnit     Decimal?
  type            MovementType
  timestamp       DateTime          @default(now())

  // Relacje
  product   CatalogProduct @relation(fields: [productId], references: [id])
  productId Int
  user      User           @relation(fields: [userId], references: [id])
  userId    Int
  task      Task?          @relation(fields: [taskId], references: [id])
  taskId    Int?
}

model Task {
  id             Int       @id @default(autoincrement())
  type           TaskType
  status         TaskStatus @default(pending)
  dueDate        DateTime
  completedAt    DateTime?
  completionNotes String?
  cost            Decimal?

  // Relacje
  patient    Patient?         @relation(fields: [patientId], references: [id])
  patientId  Int?
  activity   CatalogActivity? @relation(fields: [activityId], references: [id])
  activityId Int?
  completedBy User?           @relation(fields: [completedByUserId], references: [id])
  completedByUserId Int?
  
  inventoryMovements InventoryMovement[]
}

// === ENUMY (zdefiniowane typy) ===

enum Role {
  admin
  staff_care
  staff_doctor
  staff_rehab
  family
}

enum Priority {
  high
  medium
  low
}

enum MovementType {
  income    // przyjęcie
  outcome   // rozchód
  correction // korekta
}

enum TaskType {
  scheduled // zaplanowane
  ad_hoc    // doraźne
}

enum TaskStatus {
  pending
  completed
  cancelled
}